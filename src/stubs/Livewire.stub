<?php

namespace App\Livewire;

use Livewire\Component;
use Livewire\WithPagination;
use App\Models\{{modelName}};
use Livewire\Attributes\Computed;

class {{modelName}}s extends Component
{
    use WithPagination;

	protected $paginationTheme = 'bootstrap';
    public $selected_id, $keyWord, {{updatefield}};

    #[Computed]
	public function filtered{{modelName}}s()
	{
		$keyWord = '%' . $this->keyWord . '%';
		return {{modelName}}::latest()
			->where(function ($query) use ($keyWord) {
				$query{{search}};
			})
			->paginate(10);
	}

	public function render()
	{
		return view('livewire.{{modelNamePluralLowerCase}}.view', [
			'{{modelNamePluralLowerCase}}' => $this->filtered{{modelName}}s,
		]);
	}
	
    public function cancel()
    {
        $this->reset();
    }

    public function save()
    {
        $this->validate([{{rules}}
        ]);

        Flight::updateOrCreate(
			['id' => $this->selected_id],
			[{{addfields}}
			]
		);

        $message = $this->selected_id ? '{{modelName}} Successfully updated.' : '{{modelName}} Successfully created.';
		$this->dispatch('closeModal');
        $this->reset();
		session()->flash('message', $message);
    }

    public function edit($id)
    {
        $this->selected_id = $id;
		$this->fill({{modelName}}::findOrFail($id)->toArray());
    }

    public function destroy($id)
    {
        if ($id) {
            {{modelName}}::where('id', $id)->delete();
        }
    }
}